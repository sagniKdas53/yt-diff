const { Sequelize, DataTypes } = require('sequelize');

// Your database configuration
const config = {
  db: {
    host: '',
    user: '',
    password: '',
    name: ''
  }
};

const sequelize = new Sequelize({
  host: config.db.host,
  dialect: "postgres",
  logging: console.log, // Enable logging to see what's happening
  username: config.db.user,
  password: config.db.password,
  database: config.db.name,
});

async function migrateVideoMetadataTable() {
  const queryInterface = sequelize.getQueryInterface();

  try {
    console.log('Starting migration for video_metadata table...');

    // Check if columns already exist
    const tableDescription = await queryInterface.describeTable('video_metadata');

    // Add thumbNailFile column
    if (!tableDescription.thumbNailFile) {
      console.log('Adding thumbNailFile column...');
      await queryInterface.addColumn('video_metadata', 'thumbNailFile', {
        type: DataTypes.STRING,
        allowNull: true,
        comment: "Thumbnail generated by yt-dlp"
      });
      console.log('✓ thumbNailFile column added');
    } else {
      console.log('✓ thumbNailFile column already exists');
    }

    // Add subTitleFile column
    if (!tableDescription.subTitleFile) {
      console.log('Adding subTitleFile column...');
      await queryInterface.addColumn('video_metadata', 'subTitleFile', {
        type: DataTypes.STRING,
        allowNull: true,
        comment: "Subtitle generated by yt-dlp"
      });
      console.log('✓ subTitleFile column added');
    } else {
      console.log('✓ subTitleFile column already exists');
    }

    // Add commentsFile column
    if (!tableDescription.commentsFile) {
      console.log('Adding commentsFile column...');
      await queryInterface.addColumn('video_metadata', 'commentsFile', {
        type: DataTypes.STRING,
        allowNull: true,
        comment: "Comments file generated by yt-dlp"
      });
      console.log('✓ commentsFile column added');
    } else {
      console.log('✓ commentsFile column already exists');
    }

    // Add descriptionFile column
    if (!tableDescription.descriptionFile) {
      console.log('Adding descriptionFile column...');
      await queryInterface.addColumn('video_metadata', 'descriptionFile', {
        type: DataTypes.STRING,
        allowNull: true,
        comment: "Description retrieved by yt-dlp, not sure yet if I will save the path or read the data and save it here."
      });
      console.log('✓ descriptionFile column added');
    } else {
      console.log('✓ descriptionFile column already exists');
    }

    // Add isMetaDataSynced column
    if (!tableDescription.isMetaDataSynced) {
      console.log('Adding isMetaDataSynced column...');
      await queryInterface.addColumn('video_metadata', 'isMetaDataSynced', {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
        comment: "This will serve as a marker for other processes to know if they need to sync metadata from downloaded files"
      });
      console.log('✓ isMetaDataSynced column added');
    } else {
      console.log('✓ isMetaDataSynced column already exists');
    }

    console.log('\n✅ Migration completed successfully!');

  } catch (error) {
    console.error('❌ Migration failed:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Run the migration
migrateVideoMetadataTable()
  .then(() => {
    console.log('Script finished');
    process.exit(0);
  })
  .catch((error) => {
    console.error('Script failed:', error);
    process.exit(1);
  });
